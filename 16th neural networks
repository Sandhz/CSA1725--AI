import numpy as np

class FeedForwardNN:
    def __init__(self, input_size, hidden_size, output_size):
        self.input_size = input_size
        self.hidden_size = hidden_size
        self.output_size = output_size
        
        # Initialize weights and biases
        self.weights_input_hidden = np.random.rand(self.input_size, self.hidden_size)
        self.biases_hidden = np.random.rand(self.hidden_size)
        self.weights_hidden_output = np.random.rand(self.hidden_size, self.output_size)
        self.biases_output = np.random.rand(self.output_size)
        
    def sigmoid(self, x):
        return 1 / (1 + np.exp(-x))
    
    def sigmoid_derivative(self, x):
        return x * (1 - x)
    
    def forward(self, inputs):
        # Forward pass
        self.hidden_sum = np.dot(inputs, self.weights_input_hidden) + self.biases_hidden
        self.hidden_output = self.sigmoid(self.hidden_sum)
        
        self.output_sum = np.dot(self.hidden_output, self.weights_hidden_output) + self.biases_output
        self.output = self.sigmoid(self.output_sum)
        return self.output
    
    def backward(self, inputs, targets, learning_rate):
        # Backward pass
        output_error = targets - self.output
        output_delta = output_error * self.sigmoid_derivative(self.output)
        
        hidden_error = np.dot(output_delta, self.weights_hidden_output.T)
        hidden_delta = hidden_error * self.sigmoid_derivative(self.hidden_output)
        
        # Update weights and biases
        self.weights_hidden_output += np.dot(self.hidden_output.T, output_delta) * learning_rate
        self.biases_output += np.sum(output_delta) * learning_rate
        
        self.weights_input_hidden += np.dot(inputs.T, hidden_delta) * learning_rate
        self.biases_hidden += np.sum(hidden_delta) * learning_rate
        
    def train(self, inputs, targets, learning_rate, epochs):
        for epoch in range(epochs):
            self.forward(inputs)
            self.backward(inputs, targets, learning_rate)
            if epoch % 100 == 0:
                loss = np.mean(np.square(targets - self.output))
                print(f"Epoch {epoch}: Loss = {loss}")

# Example usage
if __name__ == "__main__":
    # Define dataset (XOR gate)
    X = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
    y = np.array([[0], [1], [1], [0]])
    
    # Define and train the neural network
    input_size = 2
    hidden_size = 3
    output_size = 1
    learning_rate = 0.1
    epochs = 1000
    
    nn = FeedForwardNN(input_size, hidden_size, output_size)
    nn.train(X, y, learning_rate, epochs)
    
    # Test the trained network
    test_input = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
    predictions = nn.forward(test_input)
    print("Predictions:")
    print(predictions)
